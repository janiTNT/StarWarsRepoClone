NodeBatteryStorage
{
    Type = ResourceStorage
    ResourceType = battery
    MaxResources = 8000
    InitToMaxResources = 0
    ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
}

// We need these resource consumers to always exist even though they don't do anything,
// because they are what keep resource assignments alive. If storage assignments thrash,
// then that causes resource AI issues.
ToggledBatteryConsumer
{
    Type = ToggledComponents
    Toggle = HypernodeConnectedToggle
    Invert = true
    IncludeInBlueprints = true
    Components
    {
        BatteryConsumer //For the crew to fill
        {
            Type = ResourceConsumer
            ResourceType = battery
            Storage = NodeBatteryStorage
            DefaultPriority = &/PRIORITIES/Ftl_Supply
            OperationalToggle = HypernodeConnectedToggle // Will always be off!
            AllowNonOperationalMinPriorityDelivery = false
            OverrideExclusiveCrewAssignment = true
        }
    }
}
NodeBatteryStorageBar
{
    Type = ProgressBar
    OperationalToggle = FtlDrive
    ShowProgressFor = NodeBatteryStorage
    LowColor = [64, 64, 0]
    HighColor = [250, 250, 0]
    FullColor = [255, 255, 0]
    Height = 10
}

NodeHyperiumStorage
{
    Type = ResourceStorage
    ResourceType = hyperium
    MaxResources = 20
    UITileRect = [9.5 + 7/64, .5 + 7/64, 1 - 14/64, 1 - 14/64]
    ReceiveResourceMediaEffects = &/COMMON_EFFECTS/ElementDeliver
    DropResourcesWhenDestroyed = true
}

// We need these resource consumers to always exist even though they don't do anything,
// because they are what keep resource assignments alive. If storage assignments thrash,
// then that causes resource AI issues.
ToggledHyperiumConsumer
{
    Type = ToggledComponents
    Toggle = HypernodeConnectedToggle
    Invert = true
    IncludeInBlueprints = true
    Components
    {
        HyperiumConsumer //For the crew to fill
        {
            Type = ResourceConsumer
            ResourceType = hyperium
            Storage = NodeHyperiumStorage
            DefaultPriority = &/PRIORITIES/Utility_Supply
            OperationalToggle = HypernodeConnectedToggle // Will always be off!
            ConsumptionToggleButtonOffset = [0, -.4]
        }
    }
}
NodeHyperiumStorageBar
{
    Type = ProgressBar
    OperationalToggle = FtlDrive
    ShowProgressFor = NodeHyperiumStorage
    LowColor = [0, 64, 64]
    HighColor = [0, 250, 250]
    FullColor = [0, 255, 255]
}

FtlDrive
{
    Type = FtlDrive
    OperationalToggle = IsOperationalAndHypernodeConnectedToggle
    Location = [10, 13]
    PowerStorage = NodeBatteryStorage
    FuelStorage = NodeHyperiumStorage
    SpinDownDuration = 10
    JumpEfficiency = 100%
    JumpEfficiencyDistanceRange = [20, 40]

    JumpOutMediaEffects : &<./Data/ships/terran/hyperdrive_small/hyperdrive_small.rules>/Part/Components/FtlDrive/JumpOutMediaEffects
    [
        &/SW_SOUNDS/Hyperdrive
    ]
    JumpOutGateMediaEffects : &<./Data/ships/terran/hyperdrive_small/hyperdrive_small.rules>/Part/Components/FtlDrive/JumpOutGateMediaEffects
    [
        &/SW_SOUNDS/Hyperdrive
    ]
    JumpInMediaEffects = &<./Data/ships/terran/hyperdrive_small/hyperdrive_small.rules>/Part/Components/FtlDrive/JumpInMediaEffects
    JumpInGateMediaEffects = &<./Data/ships/terran/hyperdrive_small/hyperdrive_small.rules>/Part/Components/FtlDrive/JumpInGateMediaEffects
}

FtlThrustEffectsMid
{
    Type = ContinuousEffects
    ChainedTo = MainThrusterLocationProxy
    FactorMediaEffectsIntensityWith = FtlDrive
    MediaEffects
    [
        &/SW_PARTICLES/Thruster/Ion/Sparks/Trail/Cyan
    ]
}
FtlThrustEffectsLeft : FtlThrustEffectsMid
{
    Location = [0, 1]
}
FtlThrustEffectsLeft2 : FtlThrustEffectsMid
{
    Location = [0, 2]
}
FtlThrustEffectsLeft3 : FtlThrustEffectsMid
{
    Location = [0, 3]
}
FtlThrustEffectsLeft4 : FtlThrustEffectsMid
{
    Location = [0, 4]
}
FtlThrustEffectsLeft5 : FtlThrustEffectsMid
{
    Location = [0, 5]
}
FtlThrustEffectsLeft6 : FtlThrustEffectsMid
{
    Location = [0, 6]
}
FtlThrustEffectsLeft7 : FtlThrustEffectsMid
{
    Location = [0, 7]
}
FtlThrustEffectsLeft8 : FtlThrustEffectsMid
{
    Location = [0, 8]
}
FtlThrustEffectsLeft9 : FtlThrustEffectsMid
{
    Location = [0, 9]
}
FtlThrustEffectsRight : FtlThrustEffectsMid
{
    Location = [0, -1]
}
FtlThrustEffectsRight2 : FtlThrustEffectsMid
{
    Location = [0, -2]
}
FtlThrustEffectsRight3 : FtlThrustEffectsMid
{
    Location = [0, -3]
}
FtlThrustEffectsRight4 : FtlThrustEffectsMid
{
    Location = [0, -4]
}
FtlThrustEffectsRight5 : FtlThrustEffectsMid
{
    Location = [0, -5]
}
FtlThrustEffectsRight6 : FtlThrustEffectsMid
{
    Location = [0, -6]
}
FtlThrustEffectsRight7 : FtlThrustEffectsMid
{
    Location = [0, -7]
}
FtlThrustEffectsRight8 : FtlThrustEffectsMid
{
    Location = [0, -8]
}
FtlThrustEffectsRight9 : FtlThrustEffectsMid
{
    Location = [0, -9]
}