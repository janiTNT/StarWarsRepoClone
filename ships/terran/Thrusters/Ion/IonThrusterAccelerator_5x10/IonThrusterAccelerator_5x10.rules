Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.IonThrusterAccelerator5x10
	//OtherIDs = []

	//StringKeys
	NameKey = "Parts/IonThrusterAccelerator5x10"
	IconNameKey = "Parts/IonThrusterAccelerator5x10Icon"
	DescriptionKey = "Parts/IonThrusterAccelerator5x10Desc"

	//Groups&Categories
	EditorGroups = ["Flight", "SWTechII", "SWTechIII"]
	TypeCategories = [engine_room, uses_power, SW_Ion_Accelerator, SW_Tech_II, SW_Tech_III] //, is_crewed
	RequiresCategories = [SW_Bridge]

	//Resources & Size & Health
	Resources
	[
		[SW.durasteel, 200]
		[coil2, 80]
		[processor, 10]
	]
	Size = [5, 10]
	MaxHealth = 40000

	//Selections
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "ion_accelerators"

	//PartSpecific
	//Density = 4 //WHY BUFF THEN; TO BE HEAVIER???

	//ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs [EnginePowerDistribution, SW_Ion_Thruster_Accelerator, SW_Ion_Thruster_Accelerator_Reverse] //grants SW_Ion_Thruster_Accelerator Buff & EnginePowerDistribution Buff

	AllowedDoorLocations
	[
		[0, -1]
		[1, -1]
		[2, -1]
		[3, -1]
		[4, -1]
		//
		//
		//
		//
		//
		//[0, 10]
		[1, 10]
		[2, 10]
		[3, 10]
		//
		//
		//[4, 10]
		//[-1, 0]
		[-1, 1]
		[-1, 2]
		[-1, 3]
		//
		//
		[-1, 6]
		[-1, 7]
		[-1, 8]
		//[-1, 9]
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		[5, 0]
		[5, 1]
		[5, 2]
		[5, 3]
		[5, 6]
		[5, 7]
		[5, 8]
		//
		//
		//
		//
		//
		//
		//
		//
		//[5, 9]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 54]
	}
	Components : ^/0/Components, <graphics.rules>
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage] //, PartCrew
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 200 //1 per tile
		}

		PowerDistributionBuffToggle
		{
			Type = BuffToggle
			BuffType = EnginePowerDistribution
		}

		SWIonThrusterAcceleratorBuffToggle
		{
			Type = BuffToggle
			BuffType = SW_Ion_Thruster_Accelerator
		}

		SWIonThrusterAcceleratorReverseBuffToggle
		{
			Type = BuffToggle
			BuffType = SW_Ion_Thruster_Accelerator_Reverse
		}

		DistributePowerUIToggle
		{
			Type = UIToggle
			ToggleID = "distribute_power"
			Default = 1
		}
		DistributePowerToggle
		{
			Type = MultiToggle
			Toggles = [DistributePowerUIToggle, IsOperational]
			Mode = All
		}

		PowerDistributionBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = EnginePowerDistribution
			BuffArea = [-5, 10, 15, 15]
			OperationalToggle = DistributePowerToggle
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 25000
		}
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [PowerDistributionBuffProvider]
				ComponentID = BatteryStorage
			}
			AddMode = PrioritizeLeastResources
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Thruster_Supply
			AdditionalStorageForJobPriority = [BatteryStorage]
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			OverrideExclusiveCrewAssignment = true
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}
		/*	PartCrew
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 1000
			ToStorage = CombinedBatteryStorage
			ToQuantity = 1000
			MinFromQuantityForConversion = 1000
			Interval = { BaseValue=1; BuffType=SW_Ion_Thruster_Accelerator_Reverse; BuffMode=Divide; }
		}	*/
		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 500
			MinFromQuantityForConversion = 1
			Interval = { BaseValue=1; BuffType=SW_Ion_Thruster_Accelerator_Reverse; BuffMode=Divide; }
		}

		IonAcceleratorBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = SW_Ion_Thruster_Accelerator
			BuffAmount = { BaseValue = 15%; BuffType=SW_Ion_Thruster_Accelerator; BuffMode=Add; }
			BuffArea = [-5, 10, 15, 15] //[0, 10, 5, 10]
			ShowBuffRange = true
			OperationalToggle = IsOperational
			ChainsFromBuffType = SW_Ion_Thruster_Accelerator
		}

		DoodadAnimationSpeedFactorValue
		{
			Type = BuffableValue
			Value = { BaseValue=0; BuffType=SW_Ion_Thruster_Accelerator_Reverse; BuffMode=Add; }
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [5, 10]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/HugePartDestroyed
			Location = [5, 10]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2.5, 5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2.5, 2.5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = 0.1
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [2.5, 2.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [5, 10]
		}

		BlueprintsBuff
		{
			Type = BlueprintSprite
			File = "blueprints_buff.png"
			Size = [15, 15]
			Offset = [0, 12.5]
		}
	}

	//Stats
	Stats
	{
		//CrewRequired = &~/Part/Components/PartCrew/Crew
		//ThrusterBuff = (&~/Part/Components/IonAcceleratorBuffProvider/BuffAmount/BaseValue) * 100
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval/BaseValue) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &PowerUsageContinuous
		RecCrew = (&RecPower) * 4
	}
}