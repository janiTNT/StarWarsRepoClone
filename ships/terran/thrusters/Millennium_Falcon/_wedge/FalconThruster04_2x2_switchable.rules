Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.FalconThruster04_2x2_test	//_switchable
	OtherIDs = ["FalconThruster04_2x2","SW.FalconThruster04_2x2"]	//,"SW.FalconThruster04_2x2_test"

	//StringKeys
	NameKey = "Parts/IonThruster01_2x2"
	IconNameKey = "Parts/IonThruster01_2x2_Icon"
	DescriptionKey = "Parts/IonThruster01_2x2_Desc"

	//Groups&Categories
	EditorGroups = ["Flight", "SWTechI", "SWTechII"]
	TypeCategories = [thruster, falcon_thruster, self_buffing, uses_power, SW_Tech_I, SW_Tech_II, SW_Falcon_Wedge]
	//RequiresCategories = []

	//Resources&Size&Health
	Resources
	[
		[steel, 50]//125%*40 of vanilla
		//[coil, 0]//133%*0 of vanilla
		[coil2, 14]//140%*10 of vanilla
		//[SW.durasteel, 0]//120%*0 of vanilla
	]
	Size = [2, 3]
	MaxHealth = 3200 //81%*4000 of vanilla 1000 per tile

	//Rects
	//PhysicalRect = [0, 0, 2, 2]
	//SaveRect = &PhysicalRect
	//BoundingRectType = Physical
	GenerateRectCollider = false

	//Selections
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "falcon_thrusters"

	//PartSpecific
	ThrusterForce = 3200 //5120 managed thru ramping buff //160%*3200 of vanilla
	ThrustIncreaseTime = 4.8 //custom
	ThrustRecoveryTime = 2.1 //custom
	FuelUsage = 128 //160%*40%*200 of vanilla

	IsFlippable = true
	IsWalled = true
	FlipHRotate = [0, 3, 2, 1]
	FlipVRotate = [2, 1, 0, 3]

	//ReceivableBuffs&Prohibits
	//
	ProhibitBelow = 5
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine, EnginePowerDistribution, SW_Hypernode_Interface, SW_Ion_Thruster_Overdrive, SW_Ion_Thruster_Overdrive_Thrust]

	//Doors&Etc
	ExternalWallsByCell
	[
		{
			Key = [0, 2]
			Value = []
		}
		{
			Key = [1, 2]
			Value = [Right, BottomRight]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 2]
			Value = [BottomRight, Bottom, BottomLeft, Left]
		}
		{
			Key = [1, 2]
			Value = [Bottom, BottomLeft]
		}
	]
	VirtualInternalCells
	[
		{ExternalCell=[-1, 2]; InternalCell=[0, 1]}
		{ExternalCell=[2, 3]; InternalCell=[1, 2]}
		{ExternalCell=[1, 3]; InternalCell=[2, 2]}
	]
	ForceManhattenPathInPart = true
	BlockedTravelCells
	[
		[1, 1]
		[1, 2]
		[2, 1]
		[2, 2]
	]
	AllowedDoorLocations
	[
		[-1, 0]
		[0, -1]
		[1, -1]
		[2, 0]
	]

	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [42.66, 64]
	}

	//Components&Inheritance
	Components : ^/0/Components
	{
		Collider
		{
			Type = PolygonCollider
			Vertices
			[
				[0, 0]
				[0, 2]
				[2, 2]
				[2, 0]
			]
			Density = 1
		}

		EmpAbsorber
		{
			Type = ExplosiveResourceDrainSink
			ResourceType = battery
			AbsorbsResourceDrain = 1000
			RecoveryRate = (&AbsorbsResourceDrain) * 0.1
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		IsOperationalAndHypernodeConnectedToggle
		{
			Type = MultiToggle
			Toggles = [IsOperational, HypernodeConnectedToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		ThrusterAngleToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		HypernodeConnectedToggle
		{
			Type = BuffToggle
			BuffType = SW_Hypernode_Interface
		}

		EngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}

		PowerDistributionBuffToggle
		{
			Type = BuffToggle
			BuffType = EnginePowerDistribution
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = PowerDistributionBuffToggle
			Invert = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}
			}
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}
		
		ColorPickerThruster
		{
			Type = UIColor
			ColorID = "SW_Part_ThrusterColor"
			Default = [38, 38, 255, 255]//.85 saturation
			AlwaysAllowInBuildMode = false
			RequiresCommand = true
		}

		ThrusterEffectType
		{
			Type = UIToggle
			ToggleID = "SW.thruster_effect_type"
			Default = 0
			AvailableChoices = [0, 1, 2, 3, 4, 5]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ThrusterEffectGlowToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectType
			OnModes = [0, 1, 2]
		}

		ThrusterEffectSparksToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectType
			OnModes = [1, 3]
		}

		ThrusterEffectFullsetToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectType
			OnModes = [2, 4]
		}

		ThrusterEffectRocketToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectType
			OnModes = [5]
		}

		ThrusterEffectGlowComponents
		{
			Type = ToggledComponents
			Toggle = ThrusterEffectGlowToggle
			Components = &<particles/thruster_colorable_glow.rules>/Components
		}

		ThrusterEffectSparksComponents
		{
			Type = ToggledComponents
			Toggle = ThrusterEffectSparksToggle
			Components = &<particles/thruster_colorable_sparks.rules>/Components
		}

		ThrusterEffectFullsetComponents
		{
			Type = ToggledComponents
			Toggle = ThrusterEffectFullsetToggle
			Components = &<particles/thruster_colorable_fullset.rules>/Components
		}

		ThrusterEffectRocketsetComponents
		{
			Type = ToggledComponents
			Toggle = ThrusterEffectRocketToggle
			Components = &<particles/thruster_colorable_rocketset.rules>/Components
		}

		HypernodeEffectComponents
		{
			Type = ToggledComponents
			Toggle = IsOperationalAndHypernodeConnectedToggle
			Components = &<particles/thruster_cyan_hypernodeset.rules>/Components
		}

		MainThrusterLocationProxy
		{
			Type = ChainableProxy
			ComponentID = MainThruster
		}

		MainThrusterValueProxy
		{
			Type = ValueProxy
			ComponentID = MainThruster
			ValueWhenNotConnected = 0
		}

		ReverseThrusterValueProxy
		{
			Type = ValueProxy
			ComponentID = ReverseThruster
			ValueWhenNotConnected = 0
		}

		BurstTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = BurstTrigger
		}

		HypernodeEffectValue
		{
			Type = BuffableValue
			Value = { BaseValue=0; BuffType=SW_Hypernode_Interface; BuffMode=Add; }
		}

		DoodadAnimationSpeedFactorValue
		{
			Type = MultiValue
			Values = [MainThrusterValueProxy, ReverseThrusterValueProxy]
			Mode = Add
		}

		ThrusterActivationBar
		{
			Type = ProgressBar
			OperationalToggle = ThrusterIsFiringThresholdToggle
			ShowProgressFor = MainThrusterValueProxy
			LowColor = [0, 0, 0]
			HighColor = [250, 250, 250]
			FullColor = [255, 255, 255]
		}

		ThrusterIsFiringThresholdToggle
		{
			Type = ThresholdToggle
			ValueFrom = MainThrusterValueProxy
			MinAmount = 10%
		}

		EngineBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = SW_Ion_Thruster_Overdrive
			ChainsFromBuffType = Engine
			BuffAmount = { BaseValue=-100%; BuffType=Engine; BuffMode=Add; }
			OperationalToggle = EngineBuffToggle
		}

		ThrusterIsFiringRampUpBuff
		{
			Type = SelfBuffProvider
			BuffType = SW_Ion_Thruster_Overdrive
			BuffAmount = 60%
			BuffMultiplier = ThrusterIsFiringTween
			OperationalToggle = ThrusterIsFiringThresholdToggle
		}
		ThrusterIsFiringTween
		{
			Type = ValueTween
			OffValue = 0
			OnValue = 1 //+60% Boost if on for OnTweenDuration
			OnTweenDuration = 12 //target is to reward continous flight and NOT provide burst buffing
			OffTweenDuration = (&OnTweenDuration) / 6 //cooldown is sixth the ramp up
			IsOnToggle = ThrusterIsFiringThresholdToggle
		}
		OverdriveActivationBar
		{
			Type = ProgressBar
			OperationalToggle = ThrusterIsFiringThresholdToggle
			ShowProgressFor = ThrusterIsFiringTween
			LowColor = [0, 0, 0]
			HighColor = [0, 250, 0]
			FullColor = [0, 255, 0]
			ValueRange = [&~/Part/Components/ThrusterIsFiringTween/OffValue, &~/Part/Components/ThrusterIsFiringTween/OnValue]
		}

		ThrustBuffProvider
		{
			Type = SelfBuffProvider
			BuffType =	SW_Ion_Thruster_Overdrive_Thrust
			ChainsFromBuffType = SW_Ion_Thruster_Overdrive
			BuffAmount = { BaseValue=100%; BuffType=SW_Ion_Thruster_Overdrive; BuffMode=Add; }
		}

		FloorGrid : &/SW_GRAPHICS/FloorGrid/GridSize_1x1/Floor_01/RDL
		{
            GridSize = [2, 2]
		}

		LightGraphics
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			GetColorFrom = ColorPickerThruster

			AnimationSpeedFactor = DoodadAnimationSpeedFactorValue
			AnimationSpeedFactorRenormalize = [0.64, 2.7]

			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights_1_bleached.png"
							"lights_2_bleached.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.1
					}
				]
			}
		/*	OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [1, 1]
					}
				]
			}	*/
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -0.25]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [2.1, 3.2]
						Z = 2.50 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [16, 120, 255] // [6, 57, 113]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational

			AnimationSpeedFactor = DoodadAnimationSpeedFactorValue
			AnimationSpeedFactorRenormalize = [0.64, 2.7]

			Floor
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_base.png"
						Size = [2, 2]
					}
					/*{
						File = "doodads_base_33.png"
						Size = [2, 2]
					}
					{
						File = "doodads_base_66.png"
						Size = [2, 2]
					}*/
				]
			}

			OperationalDoodad
			{
				Layer = "doodads_high"
				//
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on_1.png"
							"doodads_on_2.png"
							"doodads_on_3.png"
							"doodads_on_4.png"
							"doodads_on_5.png"
							"doodads_on_6.png"
							"doodads_on_7.png"
							"doodads_on_8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				//
				DamageLevels
				[
					{
						File = "doodads_off_0.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 3]
					}
				]
			}
		}

		NozzleCollider
		{
			Type = PolygonCollider
			Vertices
			[
				[0			, 2			]
				[2			, 2			]
				[2			, 3			]
			]
			Density = 1.35
		}
		NozzleGraphics
		{
			Type = Graphics
			Location = [1, 2.5]
			Floor // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "nozzle.png"
						Size = [2.0, 1.0]
					}
					{
						File = "nozzle_33.png"
						Size = [2.0, 1.0]
					}
					{
						File = "nozzle_66.png"
						Size = [2.0, 1.0]
					}
				]
			}
			Walls
			{
				Layer = "external_walls"
				DamageLevels
				[
					{
						File = "nozzle.png"
						NormalsFile = "nozzle_normals.png"
						Size = [2.0, 1.0]
					}
					{
						File = "nozzle_33.png"
						NormalsFile = "nozzle_normals_33.png"
						Size = [2.0, 1.0]
					}
					{
						File = "nozzle_66.png"
						NormalsFile = "nozzle_normals_66.png"
						Size = [2.0, 1.0]
					}
				]
			}
		}

		ToggledComponents_Thruster90degree
		{
			Type = ToggledComponents
			Toggle = ThrusterAngleToggle
			Invert = true
			Components
			{
				MainThruster
				{
					Type = Thruster
					OperationalToggle = IsOperational
					Location = [1, 2 + 46/64]
					Rotation = 90d// Relative to unrotated part.
					Force = &../../../../ThrusterForce
					MinActivation = 0
					MaxActivation = { BaseValue=1; BuffType=SW_Ion_Thruster_Overdrive_Thrust; BuffMode=Multiply; }
					MinUncommandedActivation = &MinActivation
					MaxUncommandedActivation = &MaxActivation
					ActivationIncreaseTime = &../../../../ThrustIncreaseTime
					ActivationRecoveryTime = &../../../../ThrustRecoveryTime
					FuelStorage = BatteryStorage
					FuelUsagePerSecond = &../../../../FuelUsage
				}
				ReverseThruster : MainThruster
				{
					Rotation = -90d
					MinActivation = 0
					MaxActivation = 0.20
					MinUncommandedActivation = &MinActivation
					MaxUncommandedActivation = &MaxActivation
					FuelUsagePerSecond = (&../../../../FuelUsage)*2.5//Penalty for reverse Thrust
					AllowAutoFire = false
				}
			}
		}

		ToggledComponents_Thruster115degree
		{
			Type = ToggledComponents
			Toggle = ThrusterAngleToggle
			Components
			{
				MainThruster : ../../ToggledComponents_Thruster90degree/Components/MainThruster
				{
					Rotation = 115d// Relative to unrotated part.
				}
				ReverseThruster : ../../ToggledComponents_Thruster90degree/Components/ReverseThruster
				{
					Rotation = -115d
				}
			}
		}

		ThrustEffectsSounds
		{
			Type = ContinuousEffects
			ChainedTo = MainThrusterLocationProxy
			FactorMediaEffectsIntensityWith = DoodadAnimationSpeedFactorValue
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterRumble
				{
					Volume = 0.36
					Speed = 1.5
					MaxConcurrentVolume = 0.42
				}
			]
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterValueProxy
			MinAmount = 0.5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThrusterLocationProxy
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = MainThrusterValueProxy
			AnchorMediaEffects = true
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterBurst
				{
					Volume = .125
					Speed = 1.5
					MaxConcurrentVolume = .25
				}
			]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [1, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterHum
				{
					Volume = .1
					Speed = 1.25
					MaxConcurrentVolume = 1
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.0, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries_1.png"
					Offset = [-0.5, 0]
					Size = [1, 1]
				}
				{
					File = "batteries_2.png"
					//
					Size = [2, 1]
				}
				{
					File = "batteries_3.png"
					Size = [2, 1]
				}
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [1, 1]
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
		}
	}

	//Stats
	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/EngineBuff"
			Stats
			{
				ThrusterBuff =  (&<./Data/ships/terran/engine_room/engine_room.rules>/Part/Components/BuffProvider/BuffAmount) * 100
			}
		}
		{
			NameKey = "StatCategories/SWOverdriveBuff"
			Stats
			{
				ThrusterBuff = (&~/Part/Components/ThrusterIsFiringRampUpBuff/BuffAmount) * 100
				RampUpTime = &~/Part/Components/ThrusterIsFiringTween/OnTweenDuration
			}
		}
	]
}
Size = Large